{"version":3,"sources":["components/Calculator.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["makeAList","wallLength","isImperialUnit","newArray","onCenterSpacing","studOffset","studCount","Math","ceil","push","map","roundedItem","round","Calculator","useState","listOfMeasurements","setListOfMeasurements","setImperialUnit","setWallLength","useEffect","Card","Title","Form","onSubmit","event","preventDefault","Label","Control","min","name","onChange","target","value","required","type","Button","variant","Text","onClick","prevUnit","length","join","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAQEA,EAAY,SAACC,EAAYC,GAKvB,IAJA,IACEC,EAAW,CADK,GAEhBC,EAAkBF,EAPQ,GACN,MAOpBG,EAAaH,EANM,IACF,GAObI,EAAY,EAChBA,EAAYC,KAAKC,KAAKP,EAAaG,GACnCE,IAEAH,EAASM,KAAKH,EAAYF,EAAkBC,GAG9C,OADAF,EAASM,KAAKR,EAAa,EAAII,GAC3BH,EACKC,EAEFA,EAASO,KAAI,SAACC,GAAD,OAAiBJ,KAAKK,MAAMD,OAsFrCE,MAnFf,WACE,MAAoDC,mBAAS,IAA7D,mBAAOC,EAAP,KAA2BC,EAA3B,OACsCF,oBAAS,GAD/C,mBACGZ,EADH,KACmBe,EADnB,OAEgCH,mBAAS,GAFzC,mBAEGb,EAFH,KAEeiB,EAFf,KAqBA,OAjBAC,qBAAU,WACRH,EAAsBhB,EAAUC,EAAYC,MAC3C,CAACA,EAAgBD,IAgBlB,qCACE,eAACmB,EAAA,EAAD,WACE,cAACA,EAAA,EAAKC,MAAN,mCAEA,eAACC,EAAA,EAAD,CAAMC,SAXK,SAACC,GAChBA,EAAMC,iBACNT,EAAsBhB,EAAUC,EAAYC,KASxC,UACE,cAACoB,EAAA,EAAKI,MAAN,0BAEA,cAACJ,EAAA,EAAKK,QAAN,CACEC,IAAI,IACJC,KAAK,QACLC,SApBgB,SAACN,GACzBN,EAAcM,EAAMO,OAAOC,QAoBnBC,UAAQ,EACRC,KAAK,SACLF,MAAO/B,IAGT,cAACkC,EAAA,EAAD,CAAQD,KAAK,SAASE,QAAQ,UAA9B,yBAIA,eAAChB,EAAA,EAAKiB,KAAN,+BACoBnC,EAAiB,SAAW,aADhD,OAIA,cAACiC,EAAA,EAAD,CAAQG,QAtChB,WACErB,GAAgB,SAACsB,GAAD,OAAeA,MAqCKH,QAAQ,UAAtC,oDAMJ,eAAChB,EAAA,EAAD,WACE,6CAEA,0CACYL,EAAmByB,OAD/B,6FAGGtC,EAAiB,aAAe,mBAHnC,eAMA,yGAC2E,IACxEA,EAAiB,eAAiB,iBAFrC,8JAImD,IAChDA,EAAiB,aAAe,gBALnC,oCAOE,uBAPF,wFAYA,qDAEGa,EAAmB0B,KAAK,gBC3FpBC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAQ1Bb,M","file":"static/js/main.96aab5d5.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {Button, Card, Form} from \"react-bootstrap\";\n\nconst CENTER_SPACING_IMPERIAL = 16,\n  CENTER_SPACING_METRIC = 406.4,\n  STUD_OFFSET_IMPERIAL = 0.75,\n  STUD_OFFSET_METRIC = 19,\n  makeAList = (wallLength, isImperialUnit) => {\n    const BASE_STUD = 0,\n      newArray = [BASE_STUD],\n      onCenterSpacing = isImperialUnit ? CENTER_SPACING_IMPERIAL : CENTER_SPACING_METRIC,\n      studOffset = isImperialUnit ? STUD_OFFSET_IMPERIAL : STUD_OFFSET_METRIC;\n    for (\n      let studCount = 1;\n      studCount < Math.ceil(wallLength / onCenterSpacing);\n      studCount++\n    ) {\n      newArray.push(studCount * onCenterSpacing - studOffset);\n    }\n    newArray.push(wallLength - 2 * studOffset);\n    if (isImperialUnit) {\n      return newArray;\n    }\n    return newArray.map((roundedItem) => Math.round(roundedItem));\n  };\n\nfunction Calculator() {\n  const [listOfMeasurements, setListOfMeasurements] = useState([]),\n    [isImperialUnit, setImperialUnit] = useState(true),\n    [wallLength, setWallLength] = useState(0);\n\n  useEffect(() => {\n    setListOfMeasurements(makeAList(wallLength, isImperialUnit));\n  }, [isImperialUnit, wallLength]);\n\n  function toggleUnits() {\n    setImperialUnit((prevUnit) => !prevUnit);\n  }\n\n  const handleInputChange = (event) => {\n    setWallLength(event.target.value);\n    },\n    handleSubmit = (event) => {\n    event.preventDefault();\n    setListOfMeasurements(makeAList(wallLength, isImperialUnit));\n    }\n    \n\n  return (\n    <>\n      <Card>\n        <Card.Title>Wall Stud Calculator</Card.Title>\n\n        <Form onSubmit={handleSubmit}>\n          <Form.Label>Wall length</Form.Label>\n\n          <Form.Control\n            min=\"0\"\n            name=\"wallX\"\n            onChange={handleInputChange}\n            required\n            type=\"number\"\n            value={wallLength}\n          />\n\n          <Button type=\"submit\" variant=\"primary\">\n            Layout wall\n          </Button>\n\n          <Card.Text>\n            Now measuring in {isImperialUnit ? \"Inches\" : \"Milimetres\"}.\n          </Card.Text>\n\n          <Button onClick={toggleUnits} variant=\"warning\">\n            Swap Between Imperial and Metric\n          </Button>\n        </Form>\n      </Card>\n\n      <Card>\n        <h2>Directions:</h2>\n\n        <p>\n          You need {listOfMeasurements.length} studs. Don&apos;t forget, you will need 3\n          more boards for your top and bottom plates for every\n          {isImperialUnit ? \" 96 inches\" : \" 2438 milimetres\"} of wall.\n        </p>\n\n        <p>\n          In order for your drywall to line up right, the second stud is placed at{\" \"}\n          {isImperialUnit ? \"15.25 inches\" : \"387 milimetres\"}. From there, you can hook\n          your tape onto the second stud and proceed at spacing intervals. OR, should you\n          want to mark them all in one go, simply subtract{\" \"}\n          {isImperialUnit ? \"3/4 inches\" : \"19 milimetres\"} from each number as you\n          measure.\n          <br />\n          Your wall is shown below, placing the edge of each stud on the measurments\n          listed.\n        </p>\n\n        <p>\n          Place your studs at:\n          {listOfMeasurements.join(\", \")}\n        </p>\n      </Card>\n    </>\n  );\n}\n\nexport default Calculator;\n","import \"./App.css\";\r\nimport Calculator from \"./components/Calculator\";\r\nimport React from \"react\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Calculator />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n/*\r\n * If you want to start measuring performance in your app, pass a function\r\n * To log results (for example: reportWebVitals(console.log))\r\n * Or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n */\r\nreportWebVitals();\r\n"],"sourceRoot":""}